#include<stdio.h>
#include<stdlib.h>
// 第一步 定义PID变量结构体
struct pid{
    float SetSpeed;    // 定义设定值
    float ActualSpeed; // 定义实际值
    float err;         // 定义偏差值
    float err_last;    // 定义上一个偏差值
    float Kp, Ki, Kd;  // 定义比例，积分，微分系数
    float voltage;     // 定义电压值(控制执行器的变量)
    float integral;    // 定义积分值
}pid;

// 第二步 初始化变量
void PID_init()
{
    printf("PID_init begin \n");
    pid.SetSpeed = 0.0;
    pid.ActualSpeed = 0.0;
    pid.err = 0.0;
    pid.err_last = 0.0;
    pid.voltage = 0.0;
    pid.integral = 0.0;
    pid.Kp = 0.2;     // 比例系数
    pid.Ki = 0.015;   // 积分系数
    pid.Kd = 0.2;     // 微分系数
    printf("PID_init end \n");
}

// 第三步 编写控制算法
float PID_realize(float speed)
{
    pid.SetSpeed = speed;  // 传入设定值
    pid.err = pid.SetSpeed - pid.ActualSpeed;  // 算出偏差值
    pid.integral += pid.err;     // 累计偏差值
    pid.voltage = pid.Kp * pid.err + pid.Ki * pid.integral + pid.Kd * (pid.err - pid.err_last);  // 计算之后控制调整输出
    pid.err_last = pid.err;  // 第一次的偏差值
    pid.ActualSpeed = pid.voltage * 1.0;  // 输出值
    return pid.ActualSpeed;  // 返回当前速度
}

// 基本上及时完成了，接下来就是测试代码
int main()
{

    printf("System begin \n");
    PID_init();
    int count = 0;
    while (count < 1000)
    {
        float speed = PID_realize(200.0);
        printf("%f\n", speed);
        count++;
    }
    return 0;
}

/*
PID函数快速稳定方法
Kp	提高	降低
Ti	降低	提高
Td	提高	降低
*/
